{"version":3,"file":"static/js/727.e7313790.chunk.js","mappings":"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","sources":["js/react_modules/containers/Idioms/Idioms.js"],"sourcesContent":["import React, { Component, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport lazyLoadImages from \"../../utilities/imagesLazyLoad\";\r\nimport * as actionCreators from \"../../store/actions/index\";\r\nimport Button from \"../../components/UI/Button/Button\";\r\nimport Modal from \"../../components/UI/Modal/Modal\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport { getSpreadSheetUrl, tasks } from '../../../constants'; \r\nimport \"./Idioms.css\";\r\n\r\nclass Idioms extends Component {\r\n  state = {\r\n    form: [\r\n      {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"radio\",\r\n          name: \"idiom\",\r\n          checked: false,\r\n          placeholder: \"Blue\",\r\n          id: \"Blue\"\r\n        },\r\n        value: \"\",\r\n        touched: false\r\n      },\r\n      {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"radio\",\r\n          name: \"idiom\",\r\n          checked: false,\r\n          placeholder: \"Green\",\r\n          id: \"Green\"\r\n        },\r\n        value: \"\",\r\n        touched: false\r\n      },\r\n      {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"radio\",\r\n          name: \"idiom\",\r\n          checked: false,\r\n          placeholder: \"Red\",\r\n          id: \"Red\"\r\n        },\r\n        value: \"\",\r\n        touched: false\r\n      },\r\n      {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"radio\",\r\n          name: \"idiom\",\r\n          checked: false,\r\n          placeholder: \"Black\",\r\n          id: \"Black\"\r\n        },\r\n        value: \"\",\r\n        touched: false\r\n      }\r\n    ],\r\n    currentWord: 0,\r\n    correctAnswer: \"\",\r\n    correctWords: 0\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.fetchData(\r\n      getSpreadSheetUrl('8. Color Idioms')\r\n    );\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return !this.state.currentWord ||\r\n      (this.props.data && this.props.data[nextState.currentWord])\r\n      ? true\r\n      : false;\r\n  }\r\n\r\n  onChangeHandler = e => {\r\n    e.preventDefault();\r\n    let label = e.target.previousElementSibling;\r\n    if (\r\n      this.props.data[this.state.currentWord] &&\r\n      e.target.placeholder.toUpperCase() ===\r\n        this.props.data[this.state.currentWord].correctWord.toUpperCase()\r\n    ) {\r\n      label.classList.add(\"correct\");\r\n      this.setState(prevState => {\r\n        return {\r\n          correctAnswer: true,\r\n          correctWords: prevState.correctWords + 1\r\n        };\r\n      });\r\n    } else {\r\n      label.classList.add(\"wrong\");\r\n      this.setState(prevState => {\r\n        return {\r\n          correctAnswer: true\r\n        };\r\n      });\r\n    }\r\n    setTimeout(() => {\r\n      label.classList.remove(\"correct\", \"wrong\");\r\n      this.setState(prevState => ({\r\n        correctAnswer: false,\r\n        currentWord: prevState.currentWord + 1\r\n      }));\r\n    }, 3000);\r\n  };\r\n\r\n  checkAnswer = () => {};\r\n\r\n  reloadTask = () => {\r\n    this.setState(() => ({ currentWord: 0, correctWords: 0 }));\r\n  };\r\n\r\n  render() {\r\n    let data = null;\r\n    if (this.props.loading) {\r\n      data = <Spinner />;\r\n    } else if (this.props.error) {\r\n      data = <p>Oops, something went wrong...</p>;\r\n    } else if (this.props.data) {\r\n      data = this.props.data[this.state.currentWord].shortSentence;\r\n      if (this.state.correctAnswer) {\r\n        data = this.props.data[this.state.currentWord].fullSentence;\r\n      }\r\n    }\r\n    return (\r\n      <div className=\"wrapper\">\r\n        <div className=\"scores\">\r\n          <p>You've scored:</p>\r\n          <p>\r\n            <span>{this.state.correctWords}</span> out of\r\n            <span> {this.props.data ? this.props.data.length : \"\"}</span>\r\n            <br />\r\n            questions\r\n          </p>\r\n        </div>\r\n        <div className=\"playground\">\r\n          {/* <form action=\"#\"> */}\r\n          <div>\r\n            <p className=\"question\">{data}</p>\r\n            {this.state.form.map(elem => (\r\n              <Input\r\n                change={this.onChangeHandler}\r\n                data={elem.elementConfig}\r\n                key={elem.elementConfig.placeholder}\r\n                label={elem.elementConfig.placeholder}\r\n              />\r\n            ))}\r\n              <Button classes=\"Success\" click={this.reloadTask}>Wanna try again?</Button>\r\n            <progress\r\n              max={this.props.data ? this.props.data.length : \"1\"}\r\n              value={this.state.currentWord + 1}\r\n              step=\"1\"\r\n            />\r\n            </div>\r\n          {/* </form> */}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    data: state.wordsConstructor.fetchedData,\r\n    loading: state.wordsConstructor.loading,\r\n    error: state.wordsConstructor.error,\r\n    url: state.wordsConstructor.url\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    fetchData: url => dispatch(actionCreators.asyncFetchStart(url)),\r\n    clearData: () => dispatch(actionCreators.clearData)\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Idioms);\r\n"],"names":["Idioms","state","form","elementType","elementConfig","type","name","checked","placeholder","id","value","touched","currentWord","correctAnswer","correctWords","onChangeHandler","e","preventDefault","label","target","previousElementSibling","props","data","toUpperCase","correctWord","classList","add","setState","prevState","setTimeout","remove","checkAnswer","reloadTask","this","fetchData","getSpreadSheetUrl","nextProps","nextState","loading","Spinner","error","shortSentence","fullSentence","className","length","map","elem","Input","change","Button","classes","click","max","step","Component","connect","wordsConstructor","fetchedData","url","dispatch","actionCreators","clearData"],"sourceRoot":""}