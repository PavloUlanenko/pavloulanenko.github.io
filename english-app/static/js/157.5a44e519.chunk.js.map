{"version":3,"file":"static/js/157.5a44e519.chunk.js","mappings":"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","sources":["js/react_modules/containers/WordDefenitionMatch/WordDefenitionMatch.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { connect } from'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport * as actionCreators from '../../store/actions/index';\r\nimport {\r\n\tgetSpreadSheetUrl,\r\n\tgetTaskPathByPageId,\r\n    CORRECT_MODIFIER,\r\n    WRONG_MODIFIER,\r\n} from '../../../constants'; \r\nimport './WordDefenitionMatch.scss';\r\nimport fallbackLogo from '../../../../static_assets/images/sorry-bruh.webp';\r\nimport spamImg from '../../../../static_assets/images/ration.jpg';\r\nimport rationImg from '../../../../static_assets/images/spam.jpg';\r\n\r\n/**\r\n * Word - defenition or word - translation task.\r\n * \r\n * @param {object} props - Props.\r\n * @param {string} props.data.word - Word or defenition.\r\n * @param {string} props.data.correctWord - Correct option.\r\n * @param {Array.<string>} props.data.options - Possible options.\r\n * @param {string|void} [props.data.imageUrl] - Image URL.\r\n * @param {string|void} [props.data.transcription] - IPA transcription.\r\n *\r\n * @returns {JSX.Element} Word - defenition or word - translation task content.\r\n */\r\nconst WordDefenitionMatch = (props) => {\r\n    const {\r\n\t\tfetchDataConnect,\r\n\t\tdata,\r\n\t\tloading,\r\n\t\ttitle,\r\n\t} = props;\r\n    const [currentStep, setCurrentStep] = useState(1);\r\n    const [isCorrectAnswer, setIsCorrectAnswer] = useState(null);\r\n    const [selectedWord, setSelectedWord] = useState('');\r\n    const [showNextBtn, setShowNextBtn] = useState('false'); \r\n    const { token } = useParams();\r\n\r\n    console.log('TOKEN', token, props.data);\r\n\r\n    const runValidation = (target, correctWord) => {\r\n        const clickedWord = target.textContent;\r\n        const isCorrect = correctWord === clickedWord;\r\n\r\n        setSelectedWord(clickedWord);\r\n        setIsCorrectAnswer(isCorrect);\r\n    };\r\n\r\n    const clearCurrentStep = () => {\r\n        setCurrentStep((prevState) => prevState++);\r\n        setSelectedWord('');\r\n        setIsCorrectAnswer(null);\r\n        setShowNextBtn(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const requestUrl = getTaskPathByPageId(token);\r\n\r\n\t\tfetchDataConnect(\r\n\t\t\tgetSpreadSheetUrl(requestUrl)\r\n\t\t);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        clearCurrentStep();\r\n    }, [currentStep]);\r\n\r\n    if (loading) {\r\n\t\treturn  <Spinner />;\r\n\t}\r\n\r\n    if (currentStep === data?.length) {\r\n        return (\r\n            <div className=\"success-block\">\r\n                <h2>The end! Good luck, have fun.</h2>\r\n                <ul className=\"recap-list\">\r\n                    {data.map((el) => (\r\n                        <li className=\"recap-list-item\">\r\n                            <strong>{el.correctWord}</strong> - {el.word}\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n                <div className=\"interesting-fact\">\r\n                    <h3>Did you know that?</h3>\r\n                    <div className=\"description\">\r\n                        <div className=\"image-holder\">\r\n                            <img src={rationImg} alt=\"ration-1\" />\r\n                        </div>\r\n                        <div className=\"image-holder\">\r\n                            <img src={spamImg} alt=\"ration-2\" />\r\n                        </div>\r\n                        <p>With the oubreak of the war with Russia the UK started supplying our military units with field rations. You can see one of them called \"–ü–∞–ª—è–Ω–∏—Ü—è\". Look on the canned meat in the top-left corner. The can reads \"SPAN\". The word we all perfectly know, meaning annoying emails, letters or ads, was derived from \"SPiced hAM\" or shortly \"SPAM\". When the WW2 had finished and military cut by times, there were plenty of SPAM cans left on warehouses. With the due date approaching there was a massive advertising campaign started to sell all the extra SPAMs. The word got catchy and lingered with us until now</p>\r\n                    </div>\r\n                </div>\r\n                <Button\r\n                    classes=\"-primary -wide\"\r\n                    onClickHandler={() => setCurrentStep(1)}\r\n                >\r\n                    Try again\r\n                </Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (data) {\r\n        const {\r\n            word,\r\n            options,\r\n            correctWord,\r\n            imageUrl,\r\n            transcription,\r\n        } = data[currentStep - 1];\r\n        const totalWords = data.length;\r\n        const percentDone = Math.ceil(currentStep / totalWords * 100);\r\n        const validationClassModiifer = isCorrectAnswer && selectedWord\r\n            ? CORRECT_MODIFIER\r\n            : selectedWord ? WRONG_MODIFIER : '';\r\n        const subheadText = isCorrectAnswer && selectedWord\r\n            ? 'Belissimo!'\r\n            : selectedWord ? 'Yo, dude, that sucks!' : 'Choose the right option';\r\n\r\n        return (\r\n            <div className=\"word-defenition-match-wrap\">\r\n                <div className={`defenition-block ${validationClassModiifer}`}>\r\n                    <div className=\"img-holder\">\r\n                        <img src={imageUrl || fallbackLogo} alt={word} />\r\n                    </div>\r\n                    {word}\r\n                </div>\r\n                <div className=\"options-block\">\r\n                    <h5 className={`subhead ${validationClassModiifer}`}>{subheadText}</h5>\r\n                    <ul className=\"options-list\">\r\n                        {options.split(', ').map((option) => (\r\n                            <li\r\n                                key={option}\r\n                                className={`option-item ${option === selectedWord ? validationClassModiifer : ''}${validationClassModiifer === WRONG_MODIFIER && option === correctWord ? CORRECT_MODIFIER : ''}`}\r\n                                onClick={(e) => runValidation(e.target, correctWord)}>\r\n                                    {option}\r\n                                </li>\r\n                        ))}\r\n                        <li className=\"option-item\" onClick={() => setShowNextBtn(true)}>I don't know :( üí©</li>\r\n                    </ul>\r\n                    {(selectedWord || showNextBtn) && (\r\n                        <Button\r\n                            classes=\"-primary -wide\"\r\n                            onClickHandler={() => setCurrentStep(prevState => prevState += 1)}\r\n                        >\r\n                            Next ‚Üí\r\n                        </Button>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tdata: state.wordsConstructor.fetchedData,\r\n\t\tloading: state.wordsConstructor.loading,\r\n\t\terror: state.wordsConstructor.error\r\n\t};\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\treturn {\r\n\t  fetchDataConnect: url => dispatch(actionCreators.asyncFetchStart(url))\r\n\t};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WordDefenitionMatch);"],"names":["connect","state","data","wordsConstructor","fetchedData","loading","error","dispatch","fetchDataConnect","url","actionCreators","props","title","useState","currentStep","setCurrentStep","isCorrectAnswer","setIsCorrectAnswer","selectedWord","setSelectedWord","showNextBtn","setShowNextBtn","token","useParams","console","log","useEffect","requestUrl","getTaskPathByPageId","getSpreadSheetUrl","prevState","Spinner","length","className","map","el","correctWord","word","src","rationImg","alt","spamImg","Button","classes","onClickHandler","options","imageUrl","totalWords","transcription","validationClassModiifer","Math","ceil","CORRECT_MODIFIER","WRONG_MODIFIER","subheadText","fallbackLogo","split","option","onClick","e","target","clickedWord","textContent","isCorrect","runValidation"],"sourceRoot":""}