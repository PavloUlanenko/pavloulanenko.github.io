{"version":3,"file":"static/js/305.5dda0680.chunk.js","mappings":"6QAuCA,EAvCMA,WACF,WAAYC,EAAWC,IAAkB,eACrCC,KAAKC,aAAeF,EACpBC,KAAKE,QAAL,sBAA8BJ,EAAUK,KAAK,OAA7C,MACAH,KAAKI,OAgCR,OA/BA,6BAED,WAGI,OAFAC,OAAOC,kBAAoBD,OAAOC,mBAAqBD,OAAOE,wBAC9DF,OAAOG,kBAAoBH,OAAOG,mBAAqBH,OAAOI,wBACxD,sBAAuBJ,SACzBK,MAAM,oDAEC,KAId,kBAED,WAGI,GAFoBV,KAAKW,QAEzB,CAEA,IAAML,EAAoBD,OAAOC,kBAC3BE,EAAoBH,OAAOG,kBAC3BI,EAAc,IAAIN,EAClBO,EAAwB,IAAIL,EAElCK,EAAsBC,cAAcd,KAAKE,QAAS,GAClDU,EAAYG,SAAWF,EACvBD,EAAYI,KAAO,QACnBJ,EAAYK,gBAAiB,EAC7BL,EAAYM,gBAAkB,EAC9BN,EAAYO,SAAWnB,KAAKC,aAC5BD,KAAKY,YAAcA,OACtB,EApCCf,G,SCcAuB,EAAoB,SAACC,GACvB,IACIC,EAIAD,EAJAC,OACAC,EAGAF,EAHAE,UACAC,EAEAH,EAFAG,KACAC,EACAJ,EADAI,aAGJ,OACI,iBAAKC,UAAU,oBAAf,WACI,wBAAKJ,IAEDC,GACE,gBAAKG,UAAU,YAAf,SAA4BH,IAC5B,MAEN,gBAAKG,UAAU,OAAf,SAAuBF,KACvB,gBAAKE,UAAU,gBAAf,SACKD,QAMjBL,EAAkBO,aAAe,CAC7BJ,UAAW,IAaf,Q,UCuIMK,EAAqB,CACvBC,iBAAkB,SAACC,EAAKC,GAAN,OAAkBC,EAAAA,GAA+BF,EAAKC,IACxEE,2BAA4BC,EAAAA,EAAAA,qBAGhC,GAAeC,EAAAA,EAAAA,KAXS,SAACC,GAAD,gBAAY,CAChCC,KAAI,UAAED,EAAME,iBAAR,aAAE,EAAiBC,YACvBC,QAAO,UAAEJ,EAAME,iBAAR,aAAE,EAAiBE,QAC1BC,MAAK,UAAEL,EAAME,iBAAR,aAAE,EAAiBG,SAQYb,EAAxC,EA3KkB,SAACP,GACf,IAeIT,EAdAiB,EAKAR,EALAQ,iBACAI,EAIAZ,EAJAY,2BACAO,EAGAnB,EAHAmB,QACAH,EAEAhB,EAFAgB,KAGJ,GADIhB,EADAoB,OAE8CC,EAAAA,EAAAA,WAAS,IAA3D,eAAOC,EAAP,KAA0BC,EAA1B,KACA,GAAwCF,EAAAA,EAAAA,UAAS,GAAjD,eAAOG,EAAP,KAAqBC,EAArB,KACA,GAAoCJ,EAAAA,EAAAA,WAAS,GAA7C,eAAOK,EAAP,KAAmBC,EAAnB,KACA,GAAkCN,EAAAA,EAAAA,UAAS,MAA3C,eAAOO,EAAP,KAAkBC,EAAlB,KACA,GAAsCR,EAAAA,EAAAA,UAAS,IAA/C,eAAOS,EAAP,KAAoBC,EAApB,KACA,GAAwDV,EAAAA,EAAAA,WAAS,GAAjE,eAAOW,EAAP,KAA6BC,EAA7B,KAEQC,IADSC,EAAAA,EAAAA,OACCC,EAAAA,EAAAA,MAAVF,QAGRG,EAAAA,EAAAA,YAAU,WACN,OAAO,kBAAMzB,OACd,KAEHyB,EAAAA,EAAAA,YAAU,WACN,GAAIf,IAAsBN,EAAM,CAC5B,IAAMsB,EAASC,EAAAA,GAAAA,eACTC,GAAaC,EAAAA,EAAAA,IAAoBH,GAEvBI,EAGZ7B,EAAAA,EAAAA,WAFc8B,EAEd9B,EAAAA,EAAAA,aADW+B,EACX/B,EAAAA,EAAAA,UAEJL,GACIqC,EAAAA,EAAAA,IAA4BL,EAAYN,GACxC,CACIQ,kBAAAA,EACAC,oBAAAA,EACAC,iBAAAA,OAIb,CAACtB,KAEJe,EAAAA,EAAAA,YAAU,WACFb,IACAK,EAAa,MACbE,EAAe,IACfE,GAAwB,MAE7B,CAACT,IAEJ,IA0BMsB,EAAyB,CAC3B7C,OAAQ,aACRC,UAAW,2CACXC,KAAM,oEACNC,cAdA,+BACI,SAAC2C,EAAA,EAAD,CACIC,WAAW,aACXC,eAAgB,kBAAM1B,GAAqB,IAF/C,wBAuBR,IAAKD,EACD,OACI,SAAC,GAAD,UAAuBwB,IAI/B,GAAI3B,EACN,OAAQ,SAAC+B,EAAA,EAAD,IAGN,GAAIlC,GAAQQ,EAAeR,EAAKmC,OAAS,EAAG,CACxC,MAKInC,EAAKQ,GAJL4B,EADJ,EACIA,SACAC,EAFJ,EAEIA,cACAC,EAHJ,EAGIA,YACAC,EAJJ,EAIIA,KAEE9E,EAAYuC,EAAKwC,KAAI,SAACC,GAAD,OAAQA,EAAGF,QAKtC,OAHAhE,EAAc,IAAIf,EAA2BC,GA3DzB,SAACiF,GACrB,IAAMH,EAAOG,EAAEC,QAAQ,GAAG,GAAGC,WAAWC,cAGlCC,GAFoBJ,EAAEC,QAAQ,GAAG,GAAGI,WAE1BR,IADIvC,EAAKQ,GAAc+B,MAEnCO,GAGA/B,EAAewB,GAGnB1B,EAAaiC,MAgD4DvE,YACzEA,EAAYyE,WAAa,kBAAMrC,GAAc,KAGzC,gBAAKtB,UAAU,YAAf,UACI,kBAAM4D,SA/BM,SAACP,GACrBA,EAAEQ,iBAEFvC,GAAc,GACdpC,EAAY4E,SA2BJ,WACI,oBAAQ9D,UAAU,aAAlB,WACI,gBAAKA,UAAU,aAAf,UACI,gBAAK+D,IAAKhB,EAAUiB,IAAKd,OAE7B,gCAAaA,KACb,cAAGlD,UAAU,cAAb,SAA4BiD,KAC5B,eAAGjD,UAAU,gBAAgBiE,QAAStC,EAAtC,cAA8DqB,EAA9D,QACA,cACIiB,OAAsB,OAAd1C,EACRvB,UAAS,yBAAoBuB,EAAY2C,EAAAA,GAAmBC,EAAAA,IAFhE,UAII,uBACK5C,EAAY,UAAH,+BAAuCE,WAI7D,iBAAKzB,UAAU,eAAf,WACI,SAAC0C,EAAA,EAAD,CACI0B,KAAK,SACLzB,WAAU,iBAAYtB,GAAcgD,EAAAA,IAFxC,oBAMA,SAAC3B,EAAA,EAAD,CACIC,WAAW,iBACXC,eAAgB,WACZxB,GAAgB,SAACkD,GAAD,OAAeA,EAAa,MAHpD,0BAQA,SAAC5B,EAAA,EAAD,CACIC,WAAW,mBACXC,eAAgB,kBAAMhB,GAAwB,IAFlD","sources":["js/js_modules/interfaces/SpeechRecognitionInterface.js","js/react_modules/components/ExplanationScreen/ExplanationScreen.js","js/react_modules/containers/SpellWord/SpellWord.js"],"sourcesContent":["class SpeechRecognitionInterface {\r\n    constructor(wordsList, onResultHandler) {\r\n        this.handleResult = onResultHandler;\r\n        this.grammar = `#JSGF V1.0; ${wordsList.join('\\s|\\s')} ;`;\r\n        this.init();\r\n    }\r\n\r\n    check() {\r\n        window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\n        window.SpeechGrammarList = window.SpeechGrammarList || window.webkitSpeechGrammarList; \r\n        if (!('SpeechRecognition' in window)) {\r\n            alert('Your browser doesn\\'t support the API. Update it');\r\n\r\n            return false;\r\n         }\r\n\r\n         return true;\r\n    }\r\n\r\n    init() {\r\n        const isAvailable = this.check();\r\n\r\n        if (!isAvailable) return;\r\n\r\n        const SpeechRecognition = window.SpeechRecognition;\r\n        const SpeechGrammarList = window.SpeechGrammarList;\r\n        const recognition = new SpeechRecognition();\r\n        const speechRecognitionList = new SpeechGrammarList();\r\n\r\n        speechRecognitionList.addFromString(this.grammar, 1);\r\n        recognition.grammars = speechRecognitionList;\r\n        recognition.lang = 'en-US';\r\n        recognition.interimResults = false;\r\n        recognition.maxAlternatives = 1;\r\n        recognition.onresult = this.handleResult;\r\n        this.recognition = recognition;\r\n    }\r\n}\r\n\r\nexport default SpeechRecognitionInterface;","import PropTypes from 'prop-types';\r\nimport './ExplanationScreen.css';\r\n\r\n/**\r\n * Renders entry point to tasks, explaining rules, grammar,\r\n * requesting user agreement to use browserAPI (e.g. SpeechSynthesis API).\r\n *\r\n * @param {object} props - Props.\r\n * @param {string} header - Header.\r\n * @param {string} [subheader] - Subheader.\r\n * @param {string|JSX.Element} rule - Rule description or/and markup.\r\n * @param {JSX.Element} buttonsGroup - Buttons with added handlers to them.\r\n * @returns {JSX.Element} Task initial screen.\r\n */\r\nconst ExplanationScreen = (props) => {\r\n    const {\r\n        header,\r\n        subheader,\r\n        rule,\r\n        buttonsGroup,\r\n    } = props;\r\n\r\n    return (\r\n        <div className='ExplanationScreen'>\r\n            <h2>{header}</h2>\r\n            {\r\n                subheader\r\n                ? <div className=\"subheader\">{subheader}</div>\r\n                : null\r\n            }\r\n            <div className=\"rule\">{rule}</div>\r\n            <div className=\"buttons-group\">\r\n                {buttonsGroup}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nExplanationScreen.defaultProps = {\r\n    subheader: '',\r\n};\r\n\r\nExplanationScreen.propTypes = {\r\n    header: PropTypes.string.isRequired,\r\n    subheader: PropTypes.string,\r\n    rule: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.element,\r\n    ]).isRequired,\r\n    buttonsGroup: PropTypes.element.isRequired,\r\n};\r\n\r\nexport default ExplanationScreen;","import { useState, useEffect } from 'react';\r\nimport { useLocation, useParams } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport * as actionCreators from '../../store/actions/index';\r\nimport { actions } from '../../store/reducers/spellWordReducer';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport SpeechRecognitionInterface from '../../../js_modules/interfaces/SpeechRecognitionInterface';\r\nimport ExplanationScreen from '../../components/ExplanationScreen/ExplanationScreen';\r\nimport {\r\n\tgetSpreadSheetUrlWithRanges,\r\n\tgetTaskPathByPageId,\r\n\tpathSheetIdPairs,\r\n    ACTIVE_MODIFIER,\r\n    CORRECT_MODIFIER,\r\n    WRONG_MODIFIER,\r\n    FIRST_CAPITAL_LETTER_CHARCODE,\r\n} from '../../../constants';\r\nimport './SpellWord.scss';\r\n\r\nconst SpellWord = (props) => {\r\n    const {\r\n        fetchDataConnect,\r\n        restoreInitialStateConnect,\r\n        loading,\r\n        data,\r\n        error,\r\n    } = props;\r\n    const [permissionGranted, setPermissionGranted] = useState(false);\r\n    const [currentIndex, setCurrentIndex] = useState(0);\r\n    const [isSpeaking, setIsSpeaking] = useState(false);\r\n    const [isCorrect, setIsCorrect] = useState(null);\r\n    const [spelledText, setSpelledText] = useState('');\r\n    const [isTranscriptionShown, setIsTranscriptionShown] = useState(false);\r\n    const location = useLocation();\r\n    const { token } = useParams();\r\n    let recognition;\r\n\r\n    useEffect(() => {\r\n        return () => restoreInitialStateConnect();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (permissionGranted && !data) {\r\n            const pageId = pathSheetIdPairs['/spell-word'];\r\n            const requestUrl = getTaskPathByPageId(pageId);\r\n            const {\r\n                fetchStart: fetchStartHandler,\r\n                fetchSuccess: fetchSuccessHandler,\r\n                fetchFail: fetchFailHandler,\r\n            } = actions;\r\n\r\n            fetchDataConnect(\r\n                getSpreadSheetUrlWithRanges(requestUrl, token),\r\n                {\r\n                    fetchStartHandler,\r\n                    fetchSuccessHandler,\r\n                    fetchFailHandler,\r\n                },\r\n            );\r\n        }\r\n    }, [permissionGranted]);\r\n\r\n    useEffect(() => {\r\n        if (currentIndex) {\r\n            setIsCorrect(null);\r\n            setSpelledText('');\r\n            setIsTranscriptionShown(false);\r\n        }\r\n    }, [currentIndex]);\r\n\r\n    const onResultHandler = (e) => {\r\n        const word = e.results[0][0].transcript.toLowerCase();\r\n        const confidencePercent = e.results[0][0].confidence;\r\n        const currentWord = data[currentIndex].word;\r\n        const correct = word === currentWord;\r\n        if (correct) {\r\n            // setCurrentIndex((prevState) => prevState += 1);\r\n        } else {\r\n            setSpelledText(word);\r\n        }\r\n\r\n        setIsCorrect(correct);\r\n    };\r\n\r\n    // recognition.onresult = onResultHandler;    \r\n    const buttonsGroup = (\r\n        <>\r\n            <Button\r\n                classNames=\"-secondary\"\r\n                onClickHandler={() => setPermissionGranted(true)}\r\n            >\r\n                Confirm\r\n            </Button>\r\n        </>\r\n    );\r\n\r\n    const explanationScreenProps = {\r\n        header: 'Spell Word',\r\n        subheader: 'Spell the given word correctly and score',\r\n        rule: 'To continue with the task you gotta allow the app to use your mic',\r\n        buttonsGroup,\r\n    };\r\n\r\n    const onSubmitHandler = (e) => {\r\n        e.preventDefault();\r\n\r\n        setIsSpeaking(true);\r\n        recognition.start();\r\n    };\r\n\r\n    if (!permissionGranted) {\r\n        return (\r\n            <ExplanationScreen {...explanationScreenProps} />\r\n        );\r\n    }\r\n\r\n    if (loading) {\r\n\t\treturn  <Spinner />;\r\n\t}\r\n\r\n    if (data && currentIndex < data.length - 1) {\r\n        const {\r\n            imageUrl,\r\n            transcription,\r\n            translation,\r\n            word,\r\n        } = data[currentIndex];\r\n        const wordsList = data.map((el) => el.word);\r\n\r\n        recognition = new SpeechRecognitionInterface(wordsList, onResultHandler).recognition;\r\n        recognition.onaudioend = () => setIsSpeaking(false);\r\n\r\n        return (\r\n            <div className=\"SpellWord\">\r\n                <form onSubmit={onSubmitHandler}>\r\n                    <figure className=\"word-block\">\r\n                        <div className=\"img-holder\">\r\n                            <img src={imageUrl} alt={word} />\r\n                        </div>\r\n                        <figcaption>{word}</figcaption>\r\n                        <p className=\"translation\">{translation}</p>\r\n                        <p className=\"transcription\" hidden={!isTranscriptionShown}>[{transcription}]</p>\r\n                        <p\r\n                            hidden={isCorrect === null}\r\n                            className={`result mt-full ${isCorrect ? CORRECT_MODIFIER : WRONG_MODIFIER}`}\r\n                        >\r\n                            <b>\r\n                                {isCorrect ? 'Correct' : `Wrong. You've spelt: ${spelledText}`}\r\n                            </b>\r\n                        </p>\r\n                    </figure>\r\n                    <div className=\"buttons-wrap\">\r\n                        <Button\r\n                            type=\"submit\"\r\n                            classNames={`-pulse ${isSpeaking && ACTIVE_MODIFIER}`}\r\n                        >\r\n                            Spell\r\n                        </Button>\r\n                        <Button\r\n                            classNames=\"-primary -wide\"\r\n                            onClickHandler={() => {\r\n                                setCurrentIndex((prevState) => prevState += 1);\r\n                            }}\r\n                        >\r\n                            Next →\r\n                        </Button>\r\n                        <Button\r\n                            classNames=\"-secondary -wide\"\r\n                            onClickHandler={() => setIsTranscriptionShown(true)}\r\n                        >\r\n                            Show Transcription\r\n                        </Button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    data: state.spellWord?.fetchedData,\r\n    loading: state.spellWord?.loading,\r\n    error: state.spellWord?.error\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    fetchDataConnect: (url, options) => actionCreators.asyncFetchStart(url, options),\r\n    restoreInitialStateConnect: actions.restoreInitialState,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SpellWord);"],"names":["SpeechRecognitionInterface","wordsList","onResultHandler","this","handleResult","grammar","join","init","window","SpeechRecognition","webkitSpeechRecognition","SpeechGrammarList","webkitSpeechGrammarList","alert","check","recognition","speechRecognitionList","addFromString","grammars","lang","interimResults","maxAlternatives","onresult","ExplanationScreen","props","header","subheader","rule","buttonsGroup","className","defaultProps","mapDispatchToProps","fetchDataConnect","url","options","actionCreators","restoreInitialStateConnect","actions","connect","state","data","spellWord","fetchedData","loading","error","useState","permissionGranted","setPermissionGranted","currentIndex","setCurrentIndex","isSpeaking","setIsSpeaking","isCorrect","setIsCorrect","spelledText","setSpelledText","isTranscriptionShown","setIsTranscriptionShown","token","useLocation","useParams","useEffect","pageId","pathSheetIdPairs","requestUrl","getTaskPathByPageId","fetchStartHandler","fetchSuccessHandler","fetchFailHandler","getSpreadSheetUrlWithRanges","explanationScreenProps","Button","classNames","onClickHandler","Spinner","length","imageUrl","transcription","translation","word","map","el","e","results","transcript","toLowerCase","correct","confidence","onaudioend","onSubmit","preventDefault","start","src","alt","hidden","CORRECT_MODIFIER","WRONG_MODIFIER","type","ACTIVE_MODIFIER","prevState"],"sourceRoot":""}