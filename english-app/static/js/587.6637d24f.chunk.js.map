{"version":3,"file":"static/js/587.6637d24f.chunk.js","mappings":"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","sources":["js/react_modules/containers/FindMatch/FindMatch.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\n\r\nimport * as actionCreators from '../../store/actions/index';\r\nimport { getCommonActions } from '../../store/reducers/commonReducer';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport { shakeArray } from '../../utilities/utilities';\r\nimport {\r\n\tgetSpreadSheetUrlWithRanges,\r\n\tgetTaskPathByPageId,\r\n\tpathSheetIdPairs,\r\n    FIRST_CAPITAL_LETTER_CHARCODE,\r\n} from '../../../constants';\r\nimport './FindMatch.scss';\r\n\r\nconst actions = getCommonActions('findMatch');\r\nconst inputProps = {\r\n    elementType: 'input',\r\n    elementConfig: {\r\n      type: 'text',\r\n      maxLength: 1,\r\n      autoComplete: 'off'\r\n    },\r\n    value: '',\r\n    touched: false,\r\n    correct: false\r\n};\r\n\r\nconst FindMatch = (props) => {\r\n    const {\r\n\t\tfetchDataConnect,\r\n\t\tdata,\r\n\t\tloading,\r\n\t\ttitle,\r\n\t} = props;\r\n    const { token } = useParams();\r\n    const [shakenData, setShakenData] = useState(null);\r\n    const [checkBtnDisabled, setCheckBtnDisabled] = useState(false);\r\n    const [showCorrectAnswers, setShowCorrectAnswers] = useState(false);\r\n    const [retryCounter, setRetryCounter] = useState(0);\r\n    const formRef = useRef({});\r\n\r\n\tuseEffect(() => {\r\n\t\tconst pageId = pathSheetIdPairs['/find_match'];\r\n\t\tconst requestUrl = getTaskPathByPageId(pageId);\r\n        const {\r\n\t\t\tfetchStart: fetchStartHandler,\r\n\t\t\tfetchSuccess: fetchSuccessHandler,\r\n\t\t\tfetchFail: fetchFailHandler,\r\n\t\t} = actions;\r\n\r\n\t\tfetchDataConnect(\r\n\t\t\tgetSpreadSheetUrlWithRanges(requestUrl, token),\r\n            {\r\n\t\t\t\tfetchStartHandler,\r\n\t\t\t\tfetchSuccessHandler,\r\n\t\t\t\tfetchFailHandler,\r\n\t\t\t},\r\n\t\t);\r\n\t}, []);\r\n\r\n    useEffect(() => {\r\n        if (data) {\r\n            const shaken = {\r\n                words: shakeArray(data.map(({ word }) => word)),\r\n                matches: [...new Set(shakeArray(data.map(({ match }) => match)))],\r\n            };\r\n\r\n            setShakenData(shaken);\r\n        }\r\n\r\n        if (checkBtnDisabled) {\r\n            setCheckBtnDisabled(false);\r\n        }\r\n        if (showCorrectAnswers) {\r\n            setShowCorrectAnswers(false);\r\n        }\r\n    }, [data, retryCounter]);\r\n\r\n    const onSubmitHandler = (e) => {\r\n        e.preventDefault();\r\n\r\n        const formData = new FormData(formRef.current);\r\n\r\n        for (const [key, value] of formData) { \r\n            const inputIsNotBlank = value;\r\n            const selectedOptionIndex = value?.toUpperCase().charCodeAt(0) - FIRST_CAPITAL_LETTER_CHARCODE;\r\n            const selectedWord = shakenData.matches[selectedOptionIndex];\r\n            const foundMatch = data.find(({ word, match }) => match === selectedWord && word === key);\r\n            const currentInput = document.querySelector(`[name=\"${key}\"]`);\r\n\r\n            if (inputIsNotBlank && foundMatch) {\r\n                currentInput.classList.add('Valid');\r\n                currentInput.classList.remove('Invalid');\r\n            } else {\r\n                currentInput.classList.add('Invalid');\r\n                currentInput.classList.remove('Valid'); \r\n            }\r\n        }\r\n    };\r\n\r\n    const showCorrectAnswersHandler = () => {\r\n        [...document.querySelectorAll('.find-match-form input')].forEach((input) => {\r\n            input.classList.remove('Valid', 'Invalid');\r\n        });\r\n\r\n        setShowCorrectAnswers(true);\r\n        setCheckBtnDisabled(true);\r\n    };\r\n\r\n\tif (loading) {\r\n\t\treturn  <Spinner />;\r\n\t}\r\n\r\n    if (shakenData) {\r\n        return (\r\n            <div className=\"FindMatch\">\r\n                <form onSubmit={onSubmitHandler} ref={formRef} className=\"find-match-form\">\r\n                    {title\r\n                        ? <h1>{title}</h1>\r\n                        : null}\r\n                    <ul className=\"words\">{\r\n                        shakenData.words.map((word, index) => (\r\n                            <li key={word}>\r\n                                <span>{word}</span>\r\n                                <div className=\"input-holder\">\r\n                                    <Input\r\n                                        data={{\r\n                                            ...inputProps.elementConfig,\r\n                                            name: word,\r\n                                        }}\r\n                                        value={showCorrectAnswers ? data[index].match : ''}\r\n                                    />\r\n                                </div>\r\n                            </li>\r\n                        ))\r\n                    }</ul>\r\n                    <ul className=\"matches\">{\r\n                        shakenData.matches.map((match) => (\r\n                            <li key={match}>\r\n                                <span>{match}</span>\r\n                            </li>\r\n                        ))\r\n                    }</ul>\r\n                    <div className=\"buttons-wrap\">\r\n                        <Button\r\n                            disabled={checkBtnDisabled}\r\n                            type=\"submit\"\r\n                            classNames=\"-primary -wide\"\r\n                        >\r\n                            Check\r\n                        </Button>\r\n                        <Button\r\n                            classNames=\"-primary -wide\"\r\n                            onClickHandler={showCorrectAnswersHandler}\r\n                        >\r\n                            Show Correct Answers\r\n                        </Button>\r\n                        <Button\r\n                            classNames=\"-secondary -wide\"\r\n                            onClickHandler={() => setRetryCounter((prevValue) => prevValue += 1)}\r\n                        >\r\n                            Try Again\r\n                        </Button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n\tdata: state.findMatch.fetchedData,\r\n    loading: state.findMatch.loading,\r\n    error: state.findMatch.error,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    fetchDataConnect: (url, options) => dispatch(actionCreators.asyncFetchStart(url, options)),\r\n    restoreInitialStateConnect: () => dispatch(actions.restoreInitialState()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FindMatch);","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}"],"names":["actions","getCommonActions","inputProps","type","maxLength","autoComplete","connect","state","data","findMatch","fetchedData","loading","error","dispatch","fetchDataConnect","url","options","actionCreators","restoreInitialStateConnect","restoreInitialState","props","title","token","useParams","useState","shakenData","setShakenData","checkBtnDisabled","setCheckBtnDisabled","showCorrectAnswers","setShowCorrectAnswers","retryCounter","setRetryCounter","formRef","useRef","useEffect","pageId","pathSheetIdPairs","requestUrl","getTaskPathByPageId","fetchStartHandler","fetchStart","fetchSuccessHandler","fetchSuccess","fetchFailHandler","fetchFail","getSpreadSheetUrlWithRanges","shaken","words","shakeArray","map","word","matches","Set","match","Spinner","className","onSubmit","e","preventDefault","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","length","i","F","s","n","done","value","_e","f","TypeError","err","normalCompletion","didErr","call","step","next","_e2","FormData","current","key","inputIsNotBlank","selectedOptionIndex","toUpperCase","charCodeAt","FIRST_CAPITAL_LETTER_CHARCODE","selectedWord","foundMatch","find","currentInput","document","querySelector","classList","add","remove","ref","index","Input","name","Button","disabled","classNames","onClickHandler","querySelectorAll","forEach","input","prevValue"],"sourceRoot":""}