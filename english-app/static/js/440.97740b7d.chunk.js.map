{"version":3,"file":"static/js/440.97740b7d.chunk.js","mappings":"wPA0BMA,EAAW,SAACC,GACd,IACIC,EAWAD,EAXAC,SACAC,EAUAF,EAVAE,QACAC,EASAH,EATAG,SACAC,EAQAJ,EARAI,SAEAC,GAMAL,EAPAM,MAOAN,EANAK,OAEAE,GAIAP,EALAQ,WAKAR,EAJAO,cACAE,EAGAT,EAHAS,QACAC,EAEAV,EAFAU,iBACAC,EACAX,EADAW,OAMJ,EAJmB,IAAIC,MAAML,GAAcM,mBAAmBC,EAAAA,GAAW,CACrEC,IAAK,UACLC,MAAO,UAEqBC,MAAM,KAAtC,eAAOD,EAAP,KAAcD,EAAd,KAEA,OACI,SAAC,KAAD,CAAMG,GAAE,kBAAahB,GAAWiB,MAAO,CAAEV,QAAAA,GAAzC,UACI,oBAAQW,UAAS,mBAAcnB,EAAWoB,EAAAA,GAAkB,IAA5D,WACI,gBAAKD,UAAU,aAAf,UACI,gBAAKA,UAAWE,EAAAA,GAAsBC,IAAKpB,EAAUqB,IAAKpB,OAE9D,mCACI,eAAIgB,UAAU,QAAd,UACI,0BACKf,OAGT,cAAGe,UAAU,oBAAb,SAAkCV,QAEtC,iBAAKU,UAAU,OAAf,WACI,iBAAMA,UAAU,gBAAhB,SAAiCL,KACjC,iBAAMK,UAAU,kBAAhB,SAAmCJ,OAEtCL,GACM,eAAGS,UAAU,SAAb,gBAA0BT,KAC3B,WAMtBZ,EAAS0B,aAAe,CACpBd,OAAQ,GACRL,MAAO,GACPE,WAAY,MAoBhB,Q,kEC7EMkB,G,SAAUC,EAAAA,EAAAA,GAAiB,SAC3BC,GAAiB3B,EAAAA,EAAAA,MAuErB,GAAe4B,EAAAA,EAAAA,KAXO,SAACV,GAAD,MAAY,CAChCW,KAAMX,EAAMY,KAAKC,YACjBC,QAASd,EAAMY,KAAKE,QACpBC,MAAOf,EAAMY,KAAKG,UAGO,SAACC,GAAD,MAAe,CACxCC,iBAAkB,SAACC,EAAKC,GAAN,OAAkBH,EAASI,EAAAA,GAA+BF,EAAKC,KACjFE,2BAA4B,kBAAML,EAAST,EAAQe,2BAGrD,EArEW,SAACzC,GACV,IACIoC,EAKEpC,EALFoC,iBAEAN,GAGE9B,EAJFwC,2BAIExC,EAHF8B,MACAG,EAEEjC,EAFFiC,QACAC,EACElC,EADFkC,MAEJ,GAA8CQ,EAAAA,EAAAA,UAAS,GAAvD,eAAOC,EAAP,KACQC,GADR,MACkBC,EAAAA,EAAAA,MAAVD,OAyBR,OAvBAE,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAASC,EAAAA,GAAAA,SACTC,GAAWC,EAAAA,EAAAA,IAAoBH,GAC/BI,GAAaC,EAAAA,EAAAA,IAA4BH,EAAUL,GAAS,QAGpDS,EAGZ3B,EAHA4B,WACcC,EAEd7B,EAFA8B,aACWC,EACX/B,EADAgC,UAGJtB,EACIe,EACA,CACIE,kBAAAA,EACAE,oBAAAA,EACAE,iBAAAA,MAKP,IAECxB,GACO,SAAC0B,EAAA,EAAD,IACEzB,GACF,yDACEJ,GAAQA,EAAK8B,QAElB,iBAAKxC,UAAU,OAAf,WACI,gBAAKA,UAAU,OAAf,SACIU,EAAK+B,KAAI,SAACC,GAAD,OACL,mBAAC,GAAD,kBACQA,GADR,IAEI7D,SAAU2B,EACVmC,IAAKD,EAASvD,sBAI1B,gBAAKa,UAAU,eAAf,SACKU,EAAKa,GAAiBlC,kBAb9B","sources":["js/react_modules/components/Card/BlogCard.js","js/react_modules/containers/Blog/Blog.js"],"sourcesContent":["import { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n    LAZY_LOAD_CLASS_NAME,\r\n    MOBILE_MIDIFIER,\r\n    US_LOCALE,\r\n} from '../../../constants';\r\nimport './Card.scss';\r\n\r\n/**\r\n * Renders a separate blog card.\r\n *\r\n * @param {object} props - Props.\r\n * @param {boolean} props.isMobile - To prevent hover on mobile devices. \r\n * @param {string} props.blogURL - Leads to the blog.\r\n * @param {string} props.imageURL - Card image URL.\r\n * @param {string} props.imageAlt - Alt.\r\n * @param {string} props.title - Card header.\r\n * @param {string} props.shortDescription - Card short description.\r\n * @param {string|JSX.Element} props.content - Main content of the Blog article.\r\n * @param {string} props.creationDate - Article creation date.\r\n * @param {string|void} [props.updateDate] - Article update date.\r\n * @param {string|void} [props.author] - Author of the acticle.\r\n * @param {string|void} [props.order] - Order for sorting.\r\n * @returns {JSX.Element} Searate Blog Card.\r\n */\r\nconst BlogCard = (props) => {\r\n    const {\r\n        isMobile,\r\n        blogURL,\r\n        imageURL,\r\n        imageAlt,\r\n        order,\r\n        title,\r\n        updateDate,\r\n        creationDate,\r\n        content,\r\n        shortDescription,\r\n        author,\r\n    } = props;\r\n    const parsedDate = new Date(+creationDate).toLocaleDateString(US_LOCALE, {\r\n        day: 'numeric',\r\n        month: 'short',\r\n    });\r\n    const [month, day] = parsedDate.split(' ');\r\n\r\n    return (\r\n        <Link to={`/article${blogURL}`} state={{ content }}>\r\n            <figure className={`BlogCard ${isMobile ? MOBILE_MIDIFIER : ''}`}>\r\n                <div className=\"img-holder\">\r\n                    <img className={LAZY_LOAD_CLASS_NAME} src={imageURL} alt={imageAlt} />\r\n                </div>\r\n                <figcaption>\r\n                    <h4 className=\"title\">\r\n                        <span>\r\n                            {title}\r\n                        </span>\r\n                    </h4>\r\n                    <p className=\"short-description\">{shortDescription}</p>\r\n                </figcaption>\r\n                <div className=\"date\">\r\n                    <span className='card-date-day'>{day}</span>\r\n                    <span className='card-date-month'>{month}</span> \r\n                </div>\r\n                {author\r\n                    ? (<p className=\"author\">By {author}</p>)\r\n                    : null}\r\n            </figure>\r\n        </Link>\r\n    );\r\n};\r\n\r\nBlogCard.defaultProps = {\r\n    author: '',\r\n    order: '',\r\n    updateDate: null,\r\n};\r\n\r\nBlogCard.propTypes = {\r\n    isMobile: PropTypes.bool.isRequired,\r\n    blogURL: PropTypes.string.isRequired,\r\n    imageURL: PropTypes.string.isRequired,\r\n    imageAlt: PropTypes.string.isRequired,\r\n    creationDate: PropTypes.string.isRequired,\r\n    updateDate: PropTypes.string,\r\n    title: PropTypes.string.isRequired,\r\n    shortDescription: PropTypes.string.isRequired,\r\n    content: PropTypes.oneOfType([\r\n        PropTypes.string.isRequired,\r\n        PropTypes.element.isRequired,\r\n    ]),\r\n    author: PropTypes.string,\r\n    order: PropTypes.string,\r\n};\r\n\r\nexport default BlogCard;","import { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\nimport BlogCard from '../../components/Card/BlogCard';\r\nimport {\r\n    getTaskPathByPageId,\r\n    pathSheetIdPairs,\r\n    getSpreadSheetUrlWithRanges,\r\n  } from '../../../constants';\r\nimport lazyLoadImages from \"../../utilities/imagesLazyLoad\";\r\nimport { getCommonActions } from '../../store/reducers/commonReducer';\r\nimport * as actionCreators from \"../../store/actions/index\";\r\nimport Button from \"../../components/UI/Button/Button\";\r\nimport Modal from \"../../components/UI/Modal/Modal\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport { isMobile } from '../../utilities/utilities';\r\nimport './Blog.scss';\r\n\r\nconst actions = getCommonActions('BLOG');\r\nconst isMobileDevice = isMobile();\r\n\r\nconst Blog = (props) => {\r\n    const {\r\n        fetchDataConnect,\r\n        restoreInitialStateConnect,\r\n        data,\r\n        loading,\r\n        error,\r\n      } = props;\r\n    const [activeArticleId, setActiveArticleId] = useState(0);\r\n    const { token } = useParams();\r\n\r\n    useEffect(() => {\r\n        const pageId = pathSheetIdPairs['/news'];\r\n        const taskPath = getTaskPathByPageId(pageId);\r\n        const requestUrl = getSpreadSheetUrlWithRanges(taskPath, token || '2:10');\r\n\r\n        const {\r\n          fetchStart: fetchStartHandler,\r\n          fetchSuccess: fetchSuccessHandler,\r\n          fetchFail: fetchFailHandler,\r\n      } = actions;\r\n    \r\n      fetchDataConnect(\r\n          requestUrl,\r\n          {\r\n              fetchStartHandler,\r\n              fetchSuccessHandler,\r\n              fetchFailHandler,\r\n          },\r\n      );\r\n\r\n        // return () => restoreInitialStateConnect();\r\n    }, []);\r\n\r\n    if (loading) {\r\n        return <Spinner />;\r\n      } else if (error) {\r\n        return <p>Oops, something went wrong...</p>;\r\n      } else if (data && data.length) {\r\n        return (\r\n            <div className=\"wrap\">\r\n                <div className=\"Blog\">{\r\n                    data.map((blogCard) => (\r\n                        <BlogCard\r\n                            {...blogCard}\r\n                            isMobile={isMobileDevice}\r\n                            key={blogCard.creationDate}\r\n                        />\r\n                    ))\r\n                }</div>\r\n                <div className=\"Article wrap\">\r\n                    {data[activeArticleId].content}\r\n                </div>\r\n            </div>\r\n        );\r\n      }\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    data: state.blog.fetchedData,\r\n    loading: state.blog.loading,\r\n    error: state.blog.error,\r\n  });\r\n  \r\n  const mapDispatchToProps = (dispatch) => ({\r\n    fetchDataConnect: (url, options) => dispatch(actionCreators.asyncFetchStart(url, options)),\r\n    restoreInitialStateConnect: () => dispatch(actions.restoreInitialState()),\r\n  });\r\n  \r\n  export default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(Blog);"],"names":["BlogCard","props","isMobile","blogURL","imageURL","imageAlt","title","order","creationDate","updateDate","content","shortDescription","author","Date","toLocaleDateString","US_LOCALE","day","month","split","to","state","className","MOBILE_MIDIFIER","LAZY_LOAD_CLASS_NAME","src","alt","defaultProps","actions","getCommonActions","isMobileDevice","connect","data","blog","fetchedData","loading","error","dispatch","fetchDataConnect","url","options","actionCreators","restoreInitialStateConnect","restoreInitialState","useState","activeArticleId","token","useParams","useEffect","pageId","pathSheetIdPairs","taskPath","getTaskPathByPageId","requestUrl","getSpreadSheetUrlWithRanges","fetchStartHandler","fetchStart","fetchSuccessHandler","fetchSuccess","fetchFailHandler","fetchFail","Spinner","length","map","blogCard","key"],"sourceRoot":""}