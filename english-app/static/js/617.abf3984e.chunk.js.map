{"version":3,"file":"static/js/617.abf3984e.chunk.js","mappings":"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","sources":["js/react_modules/containers/Idioms/ColorIdioms.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { connect } from \"react-redux\";\r\n\r\nimport lazyLoadImages from \"../../utilities/imagesLazyLoad\";\r\nimport { getCommonActions } from '../../store/reducers/commonReducer';\r\nimport * as actionCreators from \"../../store/actions/index\";\r\nimport Button from \"../../components/UI/Button/Button\";\r\nimport Modal from \"../../components/UI/Modal/Modal\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport ProgressBar from \"../../components/UI/ProgressBar/ProgressBar\";\r\nimport {\r\n  getSpreadSheetUrl,\r\n  tasks,\r\n  CORRECT_MODIFIER,\r\n  WRONG_MODIFIER,\r\n} from '../../../constants'; \r\nimport \"./Idioms.scss\";\r\n\r\nconst actions = getCommonActions('colorIdioms');\r\nconst form = [\r\n  {\r\n    elementType: \"input\",\r\n    elementConfig: {\r\n      type: \"radio\",\r\n      name: \"idiom\",\r\n      checked: false,\r\n      placeholder: \"Blue\",\r\n      id: \"Blue\"\r\n    },\r\n    value: \"\",\r\n    touched: false\r\n  },\r\n  {\r\n    elementType: \"input\",\r\n    elementConfig: {\r\n      type: \"radio\",\r\n      name: \"idiom\",\r\n      checked: false,\r\n      placeholder: \"Green\",\r\n      id: \"Green\"\r\n    },\r\n    value: \"\",\r\n    touched: false\r\n  },\r\n  {\r\n    elementType: \"input\",\r\n    elementConfig: {\r\n      type: \"radio\",\r\n      name: \"idiom\",\r\n      checked: false,\r\n      placeholder: \"Red\",\r\n      id: \"Red\"\r\n    },\r\n    value: \"\",\r\n    touched: false\r\n  },\r\n  {\r\n    elementType: \"input\",\r\n    elementConfig: {\r\n      type: \"radio\",\r\n      name: \"idiom\",\r\n      checked: false,\r\n      placeholder: \"Black\",\r\n      id: \"Black\"\r\n    },\r\n    value: \"\",\r\n    touched: false\r\n  }\r\n];\r\n\r\nconst ColorIdioms = (props) => {\r\n  const {\r\n    fetchDataConnect,\r\n    restoreInitialStateConnect,\r\n    data,\r\n    loading,\r\n    error,\r\n  } = props;\r\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\r\n  const [correctAnswer, setCorrectAnswer] = useState('')\r\n  const [correctWordsQty, setCorectWordsQty] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const requestUrl = getSpreadSheetUrl('8. Color Idioms');\r\n    const {\r\n\t\t\tfetchStart: fetchStartHandler,\r\n\t\t\tfetchSuccess: fetchSuccessHandler,\r\n\t\t\tfetchFail: fetchFailHandler,\r\n\t\t} = actions;\r\n\r\n    fetchDataConnect(\r\n      requestUrl,\r\n      {\r\n\t\t\t\tfetchStartHandler,\r\n\t\t\t\tfetchSuccessHandler,\r\n\t\t\t\tfetchFailHandler,\r\n\t\t\t}\r\n    );\r\n\r\n    return () => restoreInitialStateConnect();\r\n  }, []);\r\n\r\n  const reloadTask = () => {\r\n    setCurrentWordIndex(0);\r\n    setCorrectAnswer('');\r\n    setCorectWordsQty(0);\r\n  };\r\n\r\n  const onChangeHandler = (e) => {\r\n    e.preventDefault();\r\n    const isCorrect = data[currentWordIndex].correctWord === e.target.placeholder.toLowerCase();\r\n    const label = e.target.previousElementSibling;\r\n    if (isCorrect) {\r\n      label.classList.add(CORRECT_MODIFIER);\r\n      setCorectWordsQty((prev) => prev + 1);\r\n      setCorrectAnswer(true);\r\n    } else {\r\n      label.classList.add(WRONG_MODIFIER);\r\n      setCorrectAnswer(false);\r\n    }\r\n    setTimeout(() => {\r\n      label.classList.remove(CORRECT_MODIFIER, WRONG_MODIFIER);\r\n      setCorrectAnswer(false);\r\n      setCurrentWordIndex((prev) => prev + 1);\r\n    }, 3000);\r\n  };\r\n\r\n  if (loading) {\r\n    return <Spinner />;\r\n  } else if (error) {\r\n    return <p>Oops, something went wrong...</p>;\r\n  } else if (data && data.length) {\r\n    return (\r\n      <div className=\"ColorIdioms wrapper\">\r\n          <form className=\"playground\">\r\n              <p className=\"question\">\r\n                {correctAnswer\r\n                  ? data[currentWordIndex].fullSentence\r\n                  : data[currentWordIndex].shortSentence\r\n                }\r\n              </p>\r\n              {form.map((elem) => (\r\n                <Input\r\n                  change={onChangeHandler}\r\n                  data={elem.elementConfig}\r\n                  key={elem.elementConfig.placeholder}\r\n                  label={elem.elementConfig.placeholder}\r\n                />\r\n              ))}\r\n                <ProgressBar\r\n                  correct={correctWordsQty}\r\n                  total={data.length}\r\n                  done={currentWordIndex + 1}\r\n                  additionalClassNames=\"-striped\"\r\n                />\r\n                 <Button\r\n                  classNames=\"-short -green-pale -with-gradient\"\r\n                  onClickHandler={reloadTask}>\r\n                    Wanna try again?\r\n                </Button>\r\n          </form>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  data: state.colorIdioms.fetchedData,\r\n  loading: state.colorIdioms.loading,\r\n  error: state.colorIdioms.error,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  fetchDataConnect: (url, options) => dispatch(actionCreators.asyncFetchStart(url, options)),\r\n  restoreInitialStateConnect: () => dispatch(actions.restoreInitialState()),\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ColorIdioms);\r\n"],"names":["actions","getCommonActions","form","elementType","elementConfig","type","name","checked","placeholder","id","value","touched","connect","state","data","colorIdioms","fetchedData","loading","error","dispatch","fetchDataConnect","url","options","actionCreators","restoreInitialStateConnect","restoreInitialState","props","useState","currentWordIndex","setCurrentWordIndex","correctAnswer","setCorrectAnswer","correctWordsQty","setCorectWordsQty","useEffect","requestUrl","getSpreadSheetUrl","fetchStartHandler","fetchStart","fetchSuccessHandler","fetchSuccess","fetchFailHandler","fetchFail","onChangeHandler","e","preventDefault","isCorrect","correctWord","target","toLowerCase","label","previousElementSibling","classList","add","CORRECT_MODIFIER","prev","WRONG_MODIFIER","setTimeout","remove","Spinner","length","className","fullSentence","shortSentence","map","elem","Input","change","ProgressBar","correct","total","done","additionalClassNames","Button","classNames","onClickHandler"],"sourceRoot":""}