{"version":3,"file":"static/js/65.3b47da68.chunk.js","mappings":"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","sources":["js/react_modules/containers/DragAndDrop/DragAndDrop.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { getCommonActions } from '../../store/reducers/commonReducer'; \r\nimport * as actionCreators from '../../store/actions/index';\r\n\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport {\r\n\tgetSpreadSheetUrlWithRanges,\r\n\tgetTaskPathByPageId,\r\n\tpathSheetIdPairs,\r\n\tmimeTypes,\r\n} from '../../../constants'; \r\n\r\nimport './DragAndDrop.scss';\r\n\r\nconst actions = getCommonActions('DRAG_AND_DROP');\r\nconst { text } = mimeTypes;\r\n\r\nconst shiftElement = id => {\r\n\tconst  elem = document.querySelector(`[data-id=\"${id}\"]`);\r\n\r\n\treturn elem.parentNode.removeChild(elem);\r\n};\r\n\r\nconst checkIfCorrect = e => {\r\n\tif (e.target.firstElementChild.dataset.id === e.target.parentNode.dataset.value) {\r\n\t  e.target.classList.add('-correct');\r\n\t  e.target.parentNode.classList.add('-correct');\r\n\t  e.target.firstElementChild.draggable = false;\r\n\t} else {\r\n\t  e.target.classList.add('-wrong');\r\n\t}\r\n};\r\n\r\nconst onDragStartHandler = e => {\r\n\te.target.classList.add('-dragged');\r\n\te.dataTransfer.setData(text, e.target.dataset.id);\r\n\te.dataTransfer.effectAllowed = 'move';\r\n};\r\n\r\nconst onDragEndHandler = e => {\r\n\te.target.classList.remove('-dragged');\r\n};\r\n\r\nconst onDragOverHandler = e => {\r\n\tif(e.dataTransfer.types[0] === text) {\r\n\t \te.preventDefault();\r\n\t\tif (\r\n\t\t\te.target.classList.contains('droppable')\r\n\t\t\t&& !(e.target.classList.contains('-correct')\r\n\t\t\t|| e.target.classList.contains('-wrong'))\r\n\t\t) {\r\n\t\t\te.target.classList.add('-active');\r\n\t  \t}\r\n\t}\r\n  };\r\n\r\n  const onDragLeaveHandler = e => {\r\n\t[...document.querySelectorAll('.droppable')].forEach((el) => {\r\n\t\tif (!el.children.length) {\r\n\t\t\tel.classList.remove('-active', '-correct', '-wrong');\r\n\t\t}\r\n\t});\r\n  };\r\n\r\n  const onDropHandler = (e) => {\r\n\tconst wasDroppedBackInWordsList = e.target.closest('.draggable-container');\r\n\tconst droppableContainer = wasDroppedBackInWordsList || e.target.closest('.box:not(.-wrong):not(.-correct)');\r\n\tif(!droppableContainer) return;\r\n\r\n\tconst id = e.dataTransfer.getData(text);\r\n\tdroppableContainer.appendChild(shiftElement(id));\r\n\tonDragLeaveHandler();\r\n\tif (!wasDroppedBackInWordsList) {\r\n\t\tcheckIfCorrect(e);\r\n\t\te.target.classList.remove('-active'); \r\n\t}\r\n  };\r\n\r\n/**\r\n * Renders Drag and Drop game component.\r\n *\r\n * @param {object} props - Props.\r\n * @param {Array.<object>} data - Data for task.\r\n * @param {string|null} error - Error.\r\n * @param {boolean} loading - Show loader or not.\r\n * @param {Function} fetchDataConnect - Action that fetches data.\r\n * @return {JSX.Element} - Drag and Drop game component or loader. \r\n */\r\nconst DragAndDrop = (props) => {\r\n\tconst {\r\n\t\tfetchDataConnect,\r\n\t\tdata,\r\n\t\tloading,\r\n\t\ttitle,\r\n\t} = props;\r\n\tconst { token } = useParams();\r\n\r\n\tuseEffect(() => {\r\n\t\tconst pageId = pathSheetIdPairs['/drag-and-drop'];\r\n\t\tconst requestUrl = getTaskPathByPageId(pageId);\r\n\t\tconst {\r\n\t\t\tfetchStart: fetchStartHandler,\r\n\t\t\tfetchSuccess: fetchSuccessHandler,\r\n\t\t\tfetchFail: fetchFailHandler,\r\n\t\t} = actions;\r\n\t  \r\n\t\tfetchDataConnect(\r\n\t\t\tgetSpreadSheetUrlWithRanges(requestUrl, token),\r\n\t\t\t{\r\n\t\t\t\tfetchStartHandler,\r\n\t\t\t\tfetchSuccessHandler,\r\n\t\t\t\tfetchFailHandler,\r\n\t\t\t},\r\n\t\t);\r\n\t}, []);\r\n\r\n\r\n\tif (loading) {\r\n\t\treturn  <Spinner />;\r\n\t}\r\n\tif (data) {\r\n\t\treturn (\r\n\t\t\t<div className=\"DragAndDrop\">\r\n\t\t\t\t{title ? (\r\n\t\t\t\t\t<h1>{title}</h1>\r\n\t\t\t\t) : null}\r\n\t\t\t\t<div className=\"drag-and-drop\"\r\n\t\t\t\t\tonDragStart={onDragStartHandler}\r\n\t\t\t\t\tonDragEnd={onDragEndHandler}\r\n\t\t\t\t\t// onDragEnter={onDragOverHandler}\r\n\t\t\t\t\tonDragLeave={onDragLeaveHandler}\r\n\t\t\t\t\tonDragOver={onDragOverHandler}\r\n\t\t\t\t\tonDrop={onDropHandler}\r\n\t\t\t\t>\r\n\t\t\t\t\t<div className=\"draggable-container\">\r\n\t\t\t\t\t\t{data.map(el => (\r\n\t\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\t\tclassName=\"element\"\r\n\t\t\t\t\t\t\t\tdata-id={el.word}\r\n\t\t\t\t\t\t\t\tdraggable\r\n\t\t\t\t\t\t\t\tkey={el.word}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{el.word}\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<ol className=\"droppable-container\">\r\n\t\t\t\t\t\t{data\r\n\t\t\t\t\t\t\t.filter(el => el.sentence ? el.sentence : null)\r\n\t\t\t\t\t\t\t.map((el) => (\r\n\t\t\t\t\t\t\t\t<li\r\n\t\t\t\t\t\t\t\t\tclassName=\"sentense\"\r\n\t\t\t\t\t\t\t\t\tdata-value={el.correctWord}\r\n\t\t\t\t\t\t\t\t\tkey={el.correctWord}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t{el.sentence.split('|+|')[0]}\r\n\t\t\t\t\t\t\t\t\t<span className=\"box droppable\" />\r\n\t\t\t\t\t\t\t\t\t{el.sentence.split('|+|')[1]}\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</ol>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n\tdata: state.dragAndDrop.fetchedData,\r\n\tloading: state.dragAndDrop.loading,\r\n\terror: state.dragAndDrop.error,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n\tfetchDataConnect: (url, options) => dispatch(actionCreators.asyncFetchStart(url, options)),\r\n\trestoreInitialStateConnect: () => dispatch(actions.restoreInitialState()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DragAndDrop);\r\n"],"names":["actions","getCommonActions","text","mimeTypes","onDragStartHandler","e","target","classList","add","dataTransfer","setData","dataset","id","effectAllowed","onDragEndHandler","remove","onDragOverHandler","types","preventDefault","contains","onDragLeaveHandler","document","querySelectorAll","forEach","el","children","length","onDropHandler","wasDroppedBackInWordsList","closest","droppableContainer","getData","appendChild","elem","querySelector","parentNode","removeChild","shiftElement","firstElementChild","value","draggable","checkIfCorrect","connect","state","data","dragAndDrop","fetchedData","loading","error","dispatch","fetchDataConnect","url","options","actionCreators","restoreInitialStateConnect","restoreInitialState","props","title","token","useParams","useEffect","pageId","pathSheetIdPairs","requestUrl","getTaskPathByPageId","fetchStartHandler","fetchStart","fetchSuccessHandler","fetchSuccess","fetchFailHandler","fetchFail","getSpreadSheetUrlWithRanges","Spinner","className","onDragStart","onDragEnd","onDragLeave","onDragOver","onDrop","map","word","filter","sentence","correctWord","split"],"sourceRoot":""}